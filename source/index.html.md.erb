---
title: dbricks.dev - API Docs for dbricks.xyz

language_tabs:
  - json: curl
  - shell: schema

toc_footers:
  - <a href='https://www.npmjs.com/package/@dbricks/dbricks-ts'>dbricks.xyz Typescript SDK</a>
  - <a href='https://dbricks.xyz/app'>dbricks.xyz Demo App</a>
  - <a href='https://github.com/dbricks-xyz/dbricks-app'>dbricks.xyz Demo App Code</a>

search: true

code_clipboard: true

meta:
  - name: dbricks API docs
    content: Documentation for dbricks.xyz API
---

# Overview

dbricks.xyz lets you compose DeFi protocols built on Solana like lego bricks. All using a single, unified, RESTful API.

This means you can...

1. place an SRM -> SOL trade on Serum
2. deposit SOL as collateral into Mango
3. borrow USDC against it
4. deposit USDC into Saber (to earn that nice juicy yield)

...all in a *single transaction*.

This also means:

* You don't need to learn rust
* You don't need to learn how Solana works besides the basics, like [what's an instruction](https://docs.solana.com/developing/programming-model/transactions#instructions) and a [signer](https://docs.solana.com/developing/programming-model/accounts#signers)
* You don't need to find / understand / learn to use SDKs for any of the protocols we've got on dbricks
* You need to supply a lot less information than if you were to interact with protocols yourself (we fill in the gaps)
* You can combine multiple instructions into a single transaction (we make sure they fit)
* You can combine multiple protocols into a single transaction
* All in all, you can move much faster as a developer and spend your time on things that matter üí™

## Impossibru! How does this work?

Each dbricks route returns 2 things:

1. A set of instructions
2. A set of *additional* signers

### Instructions

When you hit our API we'll ask you for the minimum info necessary to execute your desired action. Eg creating a market on Serum actually [takes 12 different accounts](https://github.com/project-serum/serum-dex/blob/master/dex/src/instruction.rs#L337). With dbricks you only need to provide 2: your `base mint` and your `quote mint`.

Now when we say execute, we don't yet mean fire off to Solana. Instead, dbricks.xyz prepares the necessary instructions and sends them back to you. This is so that:

* you could combine these instructions with others into a single transaction
* you could sign them client-side without ever exposing your private key

### Signers

Depending on your desired action, there can be additional signers that need to sing the transaction. Eg sometimes we'll need to create a token account for you owned in your name, which requires the signature from the keypair used to generate that account, so we'll send it to you.

### Sending the transaction

Once you got the instructions and signers - what do you do? Simple:

1. Stuff instructions into a transaction üó≥Ô∏è
2. Prepend the signers array with the main owner's keypair üîë
3. Fire off to Solana üöÄ
4. Profit ü§ë

You can do the above by hand, or you can use our [Typescript SDK](https://www.npmjs.com/package/@dbricks/dbricks-ts). Check out our open source [demo app](https://dbricks.xyz/app) ([code](https://github.com/dbricks-xyz/dbricks-app)) to see it in action!

## REST API

REST endpoint URL: `https://dbricks.xyz/api` (check if it works by hitting `https://dbricks.xyz/api/ping`).

Requests and responses use JSON.

Currently the API only supports "active" endpoints (eg place an order) and not passive endpoints (eg read the state of the orderbook). This is due to resource constraints and will change in the near future.

Currently no authentication is in place, but there is an active rate limit of 30 requests/second on all endpoints. Reach out if you need more - [team@dbricks.dev](mailto:team@dbricks.dev)

<%= partial "includes/serum.md.erb" %>

<%= partial "includes/mango.md.erb" %>

<%= partial "includes/saber.md.erb" %>

<%= partial "includes/solend.md.erb" %>

<%= partial "includes/FAQ.md.erb" %>

<%= partial "includes/errors.md.erb" %>
